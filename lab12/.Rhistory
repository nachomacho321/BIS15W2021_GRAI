grizzly <- readr::read_csv("data/bear-sightings.csv")
grizzly %>%
select(latitude, longitude) %>%
summary()
lat1 <- c(55.02, 70.37)
long1 <- c(-166.2, -131.3)
boundbox1 <- make_bbox(long1, lat1, f=.05)
bearmap <- get_map(boundbox1, maptype = "terrain", source="stamen")
ggmap(bearmap)
ggmap(bearmap)+
geom_point(data = grizzly, aes(x=longitude, y=latitude))+
labs(x="Longitude", y="Latitude", title="Observations of Alaskan Grizzlies")+
theme(plot.title=element_text(hjust = 0.5))
wolves <- readr::read_csv("data/wolves_data/wolves_dataset.csv")
glimpse(wolves)
wolves %>%
n_distinct(pop)
n_distinct(wolves$pop)
n_distinct(wolves$pop)
wolves48 <- wolves %>%
filter(pop=="MT"| pop=="YNP", pop=="GTNP", pop=="SNF"| pop=="MI")
View(wolves48)
wolves48 <- wolves %>%
filter(pop="MT"| pop=="YNP", pop=="GTNP", pop=="SNF"| pop=="MI")
wolves48 <- wolves %>%
filter(pop=="MT"| pop=="YNP", pop=="GTNP", pop=="SNF"| pop=="MI")
wolves48 <- wolves %>%
filter(pop=="MT"| pop=="YNP", pop=="GTNP", pop=="SNF"| pop=="MI")
wolves48 <- wolves %>%
filter(pop=="MT)
wolves48 <- wolves %>%
filter(pop=="MT")
View(wolves48)
wolves48 <- wolves %>%
filter(pop=="MT"| pop=="YNP", pop=="GTNP", pop=="SNF"| pop=="MI")
wolves48 <- wolves %>%
filter(pop=="MT"| pop=="YNP", pop=="GTNP", pop=="SNF"| pop=="MI")
wolves48 <- wolves %>%
filter(pop=="MT"| pop=="YNP"| pop=="GTNP"| pop=="SNF"| pop=="MI")
n_distinct(wolves48$pop)
library(tidyverse)
library(janitor)
library(here)
library(ggmap)
library(albersusa)
library(ggthemes)
ggplot()+
geom_sf(data=us_map, size=0.5)
us_map <- usa_sf()
ggplot()+
geom_sf(data=us_map, size=0.5)
ggplot()+
geom_sf(data=us_map, size=0..125)
ggplot()+
geom_sf(data=us_map, size=0.125)
ggplot()+
geom_sf(data=us_map, size=0.81)
ggplot()+
geom_sf(data=us_map, size=0.1)
ggplot()+
geom_sf(data=us_map, size=0.1)+
theme_gdocs()
#install.packages("svglite")
library(svglite)
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude))+
labs(x = "Figure 1: Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3)) -> uso_map
ggplot()+
geom_sf(data=us_map, size=0.1)+
theme_minimal()
ggplot()+
geom_sf(data=us_map, size=0.1)+
theme_linedraw()
ggplot()+
geom_sf(data=us_map, size=0.1)+
theme_minimal()
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48)
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48, aes(x=long1, y=lat1))
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48, aes(longitude, latitude))+
theme_minimal()
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48, aes(long1, lat1))+
theme_minimal()
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48, aes(long, lat))+
theme_minimal()
wolves %>%
group_by(pop) %>%
summarise(avg_pack_size = mean(pack.size))
wolves %>%
group_by(pop) %>%
summarise(avg_pack_size = mean(pack.size)) %>%
arrange(desc(avg_pack_size))
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48, aes(long, lat), size=pack.size)+
theme_minimal()
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48, aes(long, lat, size=pack.size))+
theme_minimal()
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48, aes(long, lat, size=pack.size))+
theme_minimal()+
labs(x="Longitude", y="Latitude", title="Wolve Populations in the Lower 48 States")
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48, aes(long, lat, size=pack.size))+
theme_minimal()+
labs(x="Longitude", y="Latitude", title="Wolve Populations in the Lower 48 States")+
theme(plot.title = element_text(hjust = 0.5))
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48, aes(long, lat, size=pack.size))+
theme_minimal()+
labs(x="Longitude", y="Latitude", title="Wolve Populations in the Lower 48 States")+
theme(plot.title = element_text(hjust = 0.5), legend.title = "Pack Size")
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48, aes(long, lat, size=pack.size))+
theme_minimal()+
labs(x="Longitude", y="Latitude", title="Wolve Populations in the Lower 48 States")+
theme(plot.title = element_text(hjust = 0.5), legend.title = element_text("Pack Size"))
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48, aes(long, lat, size=pack.size))+
theme_minimal()+
labs(x="Longitude", y="Latitude", title="Wolve Populations in the Lower 48 States", size="Pack Size")+
theme(plot.title = element_text(hjust = 0.5), legend.title = element_text("Pack Size"))
ggplot()+
geom_sf(data=us_map, size=0.1)+
geom_point(data=wolves48, aes(long, lat, size=pack.size))+
theme_minimal()+
labs(x="Longitude", y="Latitude", title="Wolve Populations in the Lower 48 States", size="Pack Size")+
theme(plot.title = element_text(hjust = 0.5))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
install.packages("shiny")
library(shiny)
library(shinydashboard)
library(tidyverse)
library(palmerpenguins)
runApp("plot_iris.R")
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
names(penguins)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output) {
reactive({input$x
input$y})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output) {
reactive({input$x
input$y})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm")
)
server <- function(input, output) {
reactive({input$x
input$y})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
names(homerange)
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("locomotion"), selected = "locomotion"),
selectInput("y","Select Fill", choices = c("trophic.guild", "thermoregulation"))
plotOutput("plot", width="500px", height="400px"),
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("locomotion"), selected = "locomotion"),
selectInput("y","Select Fill", choices = c("trophic.guild", "thermoregulation") selected = "trophic.guild")
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("locomotion"), selected = "locomotion"),
selectInput("y","Select Fill", choices = c("trophic.guild", "thermoregulation") selected = "trophic.guild")
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("locomotion"), selected = "locomotion"),
selectInput("y","Select Fill", choices = c("trophic.guild", "thermoregulation") selected = "trophic.guild"),
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("locomotion"), selected = "locomotion"),
selectInput("y","Select Fill", choices = c("trophic.guild", "thermoregulation") selected = "trophic.guild"),
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("locomotion"), selected = "locomotion"),
selectInput("y","Select Fill", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px"),
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = input$x, fill=input$y)) + geom_bar()
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("locomotion"), selected = "locomotion"),
selectInput("y","Select Fill", choices = c("trophic.guild", "thermoregulation"), selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px"),
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x = input$x, fill=input$y)) + geom_bar(position = "dodge")
})
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
install.packages("shinydashboard")
install.packages("shinydashboard")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
install.packages("shinydashboard")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("naniar")
library("shinydashboard")
if (!require("tidyverse")) install.packages('tidyverse')
if (!require("tidyverse")) install.packages('tidyverse')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(shiny)
```{r, eval=F, echo=T}
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:",
choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot")
)
)
)
# define a server for the Shiny app
server <- function(input, output) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
```
source('~/.active-rstudio-document')
library("tidyverse")
library("shiny")
library("naniar")
library("shiny")
library("tidyverse")
library("naniar")
```{r, eval=F, echo=T}
library("shiny")
library("tidyverse")
library("naniar")
runApp('~/Lab_12_App')
runApp('~/Lab_12_App')
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
sidebarLayout(
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
mainPanel(
plotOutput("taxonPlot")
)
)
)
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
sidebarLayout(
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
mainPanel(
plotOutput("taxonPlot")
)
)
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
if (!require("tidyverse")) install.packages('tidyverse')
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
runApp('~/Lab_12_App')
ui <- fluidPage(
titlePanel("Log 10 Homerange by Taxon"),
sidebarLayout(
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)),
hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")
),
mainPanel(
plotOutput("taxonPlot")
)
)
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("fontsize", "Select the Font Size", min = 10, max = 24, value = 18, step = 1),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) + geom_point() + theme_light(base_size = input$fontsize)
})
}
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
runApp('~/Lab_12_App')
runApp('~/Lab_12_App')
runApp('~/Lab_12_App')
